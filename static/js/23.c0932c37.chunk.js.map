{"version":3,"file":"static/js/23.c0932c37.chunk.js","mappings":"8SACMA,EAAU,mCAEHC,EAAmB,mCAAG,6GAEVC,EAAAA,EAAAA,IAAA,kEACwCF,EADxC,oBAFU,cAEzBG,EAFyB,yBAMxBA,EAAOC,KAAKC,SANY,gCAQ/BC,QAAQC,IAAR,MAR+B,yDAAH,qDAYnBC,EAAkB,mCAAG,WAAMC,GAAN,gGAETP,EAAAA,EAAAA,IAAA,6CACmBO,EADnB,oBACiCT,EADjC,oBAFS,cAExBG,EAFwB,yBAMvBA,EAAOC,MANgB,gCAQ9BE,QAAQC,IAAR,MAR8B,yDAAH,sDAYlBG,EAAkB,mCAAG,WAAMD,GAAN,gGAETP,EAAAA,EAAAA,IAAA,6CACmBO,EADnB,4BACyCT,EADzC,oBAFS,cAExBG,EAFwB,yBAMvBA,EAAOC,KAAKO,MANW,gCAQ9BL,QAAQC,IAAR,MAR8B,yDAAH,sDAYlBK,EAAkB,mCAAG,WAAMH,GAAN,gGAETP,EAAAA,EAAAA,IAAA,6CACmBO,EADnB,4BACyCT,EADzC,oBAFS,cAExBG,EAFwB,yBAMvBA,EAAOC,KAAKC,SANW,gCAQ9BC,QAAQC,IAAR,MAR8B,yDAAH,sDAYlBM,EAAY,mCAAG,WAAMC,GAAN,gGAEHZ,EAAAA,EAAAA,IAAA,4DACkCF,EADlC,kBACmDc,EADnD,oBAFG,cAElBX,EAFkB,yBAMjBA,EAAOC,KAAKC,SANK,gCAQxBC,QAAQC,IAAR,MARwB,yDAAH,qD,wGCTzB,UAtCgB,WACd,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAee,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACRC,EAAaP,EACd,GAAE,CAACA,IAEJ,IAAMO,EAAY,mCAAG,WAAMP,GAAN,uFAEjBK,GAAa,GAFI,UAGER,EAAAA,EAAAA,IAAmBG,GAHrB,OAGXX,EAHW,OAKjBc,EAAUd,GALO,gDAOjBE,QAAQC,IAAR,MAPiB,yBASjBa,GAAa,GATI,4EAAH,sDAalB,OACE,gCACGD,GAAa,eACd,wBACGhB,GACCA,EAAOoB,KAAI,gBAAGd,EAAH,EAAGA,GAAIe,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACT,2BACE,0BAAI,UAAQD,MACZ,uBAAIC,MAFGhB,EADA,QASpB,C","sources":["components/moviesService.js","components/reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '406bff9354a0d1960c3f65dfdea628e2';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const movies = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}&language=en-US`\n    );\n\n    return movies.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDetailsMovies = async id => {\n  try {\n    const movies = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return movies.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCreditsMovies = async id => {\n  try {\n    const movies = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return movies.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchReviewsMovies = async id => {\n  try {\n    const movies = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n\n    return movies.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const movies = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&language=en-US`\n    );\n\n    return movies.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchReviewsMovies } from 'components/moviesService';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    fetchReviews(movieId);\n  }, [movieId]);\n\n  const fetchReviews = async movieId => {\n    try {\n      setIsLoading(true);\n      const data = await fetchReviewsMovies(movieId);\n\n      setMovies(data);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <>\n      {isLoading && 'Loading ...'}\n      <ul>\n        {movies &&\n          movies.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>Author:{author}</h4>\n              <p>{content}</p>\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["API_KEY","fetchTrendingMovies","axios","movies","data","results","console","log","fetchDetailsMovies","id","fetchCreditsMovies","cast","fetchReviewsMovies","searchMovies","query","movieId","useParams","useState","setMovies","isLoading","setIsLoading","useEffect","fetchReviews","map","author","content"],"sourceRoot":""}