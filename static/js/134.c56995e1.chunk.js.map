{"version":3,"file":"static/js/134.c56995e1.chunk.js","mappings":"oKA6BA,IAzBmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,wBACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,UACE,uBAAII,OAFCD,EADC,OAUnB,C,+LClBKK,EAAU,mCAEHC,EAAmB,mCAAG,6GAEVC,EAAAA,EAAAA,IAAA,kEACwCF,EADxC,oBAFU,cAEzBT,EAFyB,yBAMxBA,EAAOY,KAAKC,SANY,gCAQ/BC,QAAQC,IAAR,MAR+B,yDAAH,qDAYnBC,EAAkB,mCAAG,WAAMZ,GAAN,gGAETO,EAAAA,EAAAA,IAAA,6CACmBP,EADnB,oBACiCK,EADjC,oBAFS,cAExBT,EAFwB,yBAMvBA,EAAOY,MANgB,gCAQ9BE,QAAQC,IAAR,MAR8B,yDAAH,sDAYlBE,EAAkB,mCAAG,WAAMb,GAAN,gGAETO,EAAAA,EAAAA,IAAA,6CACmBP,EADnB,4BACyCK,EADzC,oBAFS,cAExBT,EAFwB,yBAMvBA,EAAOY,KAAKM,MANW,gCAQ9BJ,QAAQC,IAAR,MAR8B,yDAAH,sDAYlBI,EAAkB,mCAAG,WAAMf,GAAN,gGAETO,EAAAA,EAAAA,IAAA,6CACmBP,EADnB,4BACyCK,EADzC,oBAFS,cAExBT,EAFwB,yBAMvBA,EAAOY,KAAKC,SANW,gCAQ9BC,QAAQC,IAAR,MAR8B,yDAAH,sDAYlBK,EAAY,mCAAG,WAAMC,GAAN,gGAEHV,EAAAA,EAAAA,IAAA,4DACkCF,EADlC,kBACmDY,EADnD,oBAFG,cAElBrB,EAFkB,yBAMjBA,EAAOY,KAAKC,SANK,gCAQxBC,QAAQC,IAAR,MARwB,yDAAH,qD,iHCOzB,UArDe,WACb,OAAwCO,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,YAA5B,eAAOzB,EAAP,KAAe0B,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAcR,EAAaS,IAAI,UAErCC,EAAAA,EAAAA,YAAU,WACY,KAAhBF,GACAA,GACFG,EAAWH,EAEd,GAAE,CAACA,IAEJ,IAMMG,EAAU,mCAAG,WAAMH,GAAN,uFAEfH,GAAa,GAFE,UAGIR,EAAAA,EAAAA,IAAaW,GAHjB,OAGTnB,EAHS,OAKfc,EAAUd,GALK,gDAOfkB,EAAS,EAAD,IAPO,yBASfF,GAAa,GATE,4EAAH,sDAahB,OACE,4BACE,kBAAMO,SArBY,SAAAC,GACpBA,EAAEC,iBAEFb,EAAgB,CAAEH,MAAOe,EAAEE,cAAcC,SAASlB,MAAMmB,QACxDJ,EAAEE,cAAcG,OACjB,EAgBG,WACE,kBACEC,KAAK,OACLC,KAAK,QACLC,aAAa,KACbC,YAAY,sBAEd,mBAAQH,KAAK,SAAb,SAAsB,cAGvBf,GAAa,cACbE,IAAS,uBAAG,yCACZ7B,IAAU,SAAC,IAAD,CAAYA,OAAQA,MAGpC,C","sources":["components/moviesList/MoviesList.jsx","moviesService.js","pages/Movies.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <ul>\n        {movies.map(({ id, original_title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <p>{original_title}</p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\nexport default MoviesList;\n","import axios from 'axios';\nconst API_KEY = '406bff9354a0d1960c3f65dfdea628e2';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const movies = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}&language=en-US`\n    );\n\n    return movies.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDetailsMovies = async id => {\n  try {\n    const movies = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return movies.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCreditsMovies = async id => {\n  try {\n    const movies = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return movies.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchReviewsMovies = async id => {\n  try {\n    const movies = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n\n    return movies.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const movies = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&language=en-US`\n    );\n\n    return movies.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport MoviesList from 'components/moviesList/MoviesList';\nimport { searchMovies } from 'moviesService';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (searchQuery === '') return;\n    if (searchQuery) {\n      fetchQuery(searchQuery);\n    }\n  }, [searchQuery]);\n\n  const handlerSubmit = e => {\n    e.preventDefault();\n\n    setSearchParams({ query: e.currentTarget.elements.query.value });\n    e.currentTarget.reset();\n  };\n  const fetchQuery = async searchQuery => {\n    try {\n      setIsLoading(true);\n      const data = await searchMovies(searchQuery);\n\n      setMovies(data);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handlerSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"on\"\n          placeholder=\"Search movies...\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {isLoading && 'Loading ...'}\n      {error && <p>An error occurred. Please try again.</p>}\n      {movies && <MoviesList movies={movies} />}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["movies","location","useLocation","map","id","original_title","to","state","from","API_KEY","fetchTrendingMovies","axios","data","results","console","log","fetchDetailsMovies","fetchCreditsMovies","cast","fetchReviewsMovies","searchMovies","query","useSearchParams","searchParams","setSearchParams","useState","setMovies","isLoading","setIsLoading","error","setError","searchQuery","get","useEffect","fetchQuery","onSubmit","e","preventDefault","currentTarget","elements","value","reset","type","name","autoComplete","placeholder"],"sourceRoot":""}